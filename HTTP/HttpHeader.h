#pragma once

/**HTTPHeader is used to store information about a HTTPHeader*/
struct HttpHeader{
	const char* A_IM;
	const char* Accept;
	const char* Accept_Additions;
	const char* Accept_CH;
	const char* Accept_Charset;
	const char* Accept_Datetime;
	const char* Accept_Encoding;
	const char* Accept_Features;
	const char* Accept_Language;
	const char* Accept_Patch;
	const char* Accept_Post;
	const char* Accept_Ranges;
	const char* Access_Control;
	const char* Access_Control_Allow_Credentials;
	const char* Access_Control_Allow_Headers;
	const char* Access_Control_Allow_Methods;
	const char* Access_Control_Allow_Origin;
	const char* Access_Control_Max_Age;
	const char* Access_Control_Request_Headers;
	const char* Access_Control_Request_Method;
	const char* Age;
	const char* Allow;
	const char* ALPN;
	const char* Alt_Svc;
	const char* Alt_Used;
	const char* Alternates;
	const char* AMP_Cache_Transform;
	const char* Apply_To_Redirect_Ref;
	const char* Authentication_Control;
	const char* Authentication_Info;
	const char* Authorization;
	const char* C_Ext;
	const char* C_Man;
	const char* C_Opt;
	const char* C_PEP;
	const char* C_PEP_Info;
	const char* Cache_Control;
	const char* Cache_Status;
	const char* Cal_Managed_ID;
	const char* CalDAV_Timezones;
	const char* CDN_Loop;
	const char* Cert_Not_After;
	const char* Cert_Not_Before;
	const char* Close;
	const char* Compliance;
	const char* Connection;
	const char* Content_Base;
	const char* Content_Disposition;
	const char* Content_Encoding;
	const char* Content_ID;
	const char* Content_Language;
	const char* Content_Length;
	const char* Content_Location;
	const char* Content_MD5;
	const char* Content_Range;
	const char* Content_Script_Type;
	const char* Content_Style_Type;
	const char* Content_Transfer_Encoding;
	const char* Content_Type;
	const char* Content_Version;
	const char* Cookie;
	const char* Cookie2;
	const char* Cost;
	const char* DASL;
	const char* Date;
	const char* DAV;
	const char* Default_Style;
	const char* Delta_Base;
	const char* Depth;
	const char* Derived_From;
	const char* Destination;
	const char* Differential_ID;
	const char* Digest;
	const char* Early_Data;
	const char* EDIINT_Features;
	const char* ETag;
	const char* Expect;
	const char* Expect_CT;
	const char* Expires;
	const char* Ext;
	const char* Forwarded;
	const char* From;
	const char* GetProfile;
	const char* Hobareg;
	const char* Host;
	const char* HTTP2_Settings;
	const char* If;
	const char* If_Match;
	const char* If_Modified_Since;
	const char* If_None_Match;
	const char* If_Range;
	const char* If_Schedule_Tag_Match;
	const char* If_Unmodified_Since;
	const char* IM;
	const char* Include_Referred_Token_Binding_ID;
	const char* Isolation;
	const char* Keep_Alive;
	const char* Label;
	const char* Last_Modified;
	const char* Link;
	const char* Location;
	const char* Lock_Token;
	const char* Man;;
	const char* Max_Forwards;
	const char* Memento_Datetime;
	const char* Message_ID;
	const char* Meter;
	const char* Method_Check;
	const char* Method_Check_Expires;
	const char* MIME_Version;
	const char* Negotiate;
	const char* Non_Compliance;
	const char* OData_EntityId;
	const char* OData_Isolation;
	const char* OData_MaxVersion;
	const char* OData_Version;
	const char* Opt;
	const char* Optional;
	const char* Optional_WWW_Authenticate;
	const char* Ordering_Type;
	const char* Origin;
	const char* OSCORE;
	const char* OSLC_Core_Version;
	const char* Overwrite;
	const char* P3P;
	const char* PEP;
	const char* Pep_Info;
	const char* PICS_Label;
	const char* Position;
	const char* Pragma;
	const char* Prefer;
	const char* Preference_Applied;
	const char* ProfileObject;
	const char* Protocol;
	const char* Protocol_Info;
	const char* Protocol_Query;
	const char* Protocol_Request;
	const char* Proxy_Authenticate;
	const char* Proxy_Authentication_Info;
	const char* Proxy_Authorization;
	const char* Proxy_Features;
	const char* Proxy_Instruction;
	const char* Proxy_Status;
	const char* Public;
	const char* Public_Key_Pins;
	const char* Public_Key_Pins_Report_Only;
	const char* Range;
	const char* Redirect_Ref;
	const char* Referer;
	const char* Referer_Root;
	const char* Repeatability_Client_ID;
	const char* Repeatability_First_Sent;
	const char* Repeatability_Request_ID;
	const char* Repeatability_Result;
	const char* Replay_Nonce;
	const char* Resolution_Hint;
	const char* Resolver_Location;
	const char* Retry_After;
	const char* Safe;
	const char* Schedule_Reply;
	const char* Schedule_Tag;
	const char* Sec_Token_Binding;
	const char* Sec_WebSocket_Accept;
	const char* Sec_WebSocket_Extensions;
	const char* Sec_WebSocket_Key;
	const char* Sec_WebSocket_Protocol;
	const char* Sec_WebSocket_Version;
	const char* Security_Scheme;
	const char* Server;
	const char* Set_Cookie;
	const char* Set_Cookie2;
	const char* SetProfile;
	const char* SLUG;
	const char* SoapAction;
	const char* Status_URI;
	const char* Strict_Transport_Security;
	const char* SubOK;
	const char* Subst;
	const char* Sunset;
	const char* Surrogate_Capability;
	const char* Surrogate_Control;
	const char* TCN;
	const char* TE;
	const char* Timeout;
	const char* Timing_Allow_Origin;
	const char* Title;
	const char* Topic;
	const char* Traceparent;
	const char* Tracestate;
	const char* Trailer;
	const char* Transfer_Encoding;
	const char* TTL;
	const char* UA_Color;
	const char* UA_Media;
	const char* UA_Pixels;
	const char* UA_Resolution;
	const char* UA_Windowpixels;
	const char* Upgrade;
	const char* Urgency;
	const char* URI;
	const char* User_Agent;
	const char* Variant_Vary;
	const char* Vary;
	const char* Version;
	const char* Via;
	const char* Want_Digest;
	const char* Warning;
	const char* WWW_Authenticate;
	const char* X_Content_Type_Options;
	const char* X_Device_Accept;
	const char* X_Device_Accept_Charset;
	const char* X_Device_Accept_Encoding;
	const char* X_Device_Accept_Language;
	const char* X_Device_User_Agent;
	const char* X_Frame_Options;
};
